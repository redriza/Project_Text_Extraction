import os
import re
import csv
from pdf2image import convert_from_path
from PIL import Image
import pytesseract
from indic_transliteration import sanscript
from indic_transliteration.sanscript import transliterate

# === PATHS ===
PDF_PATH = r"C:\Users\divya\Desktop\New folder\pdf2.pdf"
OUTPUT_CSV = r"C:\Users\divya\Desktop\project\output.csv"
POPPLER_PATH = r"C:\Program Files\poppler-24.08.0\Library\bin"
TESSERACT_PATH = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
pytesseract.pytesseract.tesseract_cmd = TESSERACT_PATH

def convert_pdf_to_images(pdf_path):
    print("Converting first 2 pages of PDF to images...")
    images = convert_from_path(
        pdf_path,
        dpi=300,
        first_page=1,
        last_page=2,
        poppler_path=POPPLER_PATH
    )
    print(f"{len(images)} pages converted.")
    return images

def clean_ocr_text(text):
    text = text.replace('I$', 'IS').replace('$', 'S').replace('0f', 'of').replace('0', 'o')
    text = re.sub(r'\(\s*\)', '', text)
    return text

def remove_ascii_borders(text):
    lines = text.splitlines()
    return "\n".join([line for line in lines if line.count('|') < 5 and len(line.strip()) > 3])

def convert_to_iast(text):
    return transliterate(text, sanscript.ITRANS, sanscript.IAST)

def convert_to_devanagari(text):
    return transliterate(text, sanscript.ITRANS, sanscript.DEVANAGARI)

def extract_blocks(text):
    blocks = []
    current_chapter = ""
    current_subchapter = ""
    lines = text.splitlines()
    i = 0

    while i < len(lines):
        line = lines[i].strip()

        if "Adhikarana" in line:
            current_chapter = line
            i += 1
            continue

        elif line.isupper() and len(line.split()) > 2:
            current_subchapter = line
            i += 1
            continue

        elif re.match(r'^\d\.\d+\.\d+', line):
            sutra_no = line
            block = {
                "Chapter Title": current_chapter,
                "Sub-Chapter Title": current_subchapter,
                "sutra_no": sutra_no
            }
            i += 1
            roman = []
            synonyms = []
            translation = ""
            sb_ref = ""

            while i < len(lines) and re.search(r'[a-zA-Z]', lines[i]) and not lines[i].startswith("TRANSLATION") and not re.match(r'^\d\.\d+\.\d+', lines[i]):
                roman.append(lines[i])
                i += 1

            while i < len(lines) and "--" in lines[i]:
                synonyms.append(lines[i])
                i += 1

            while i < len(lines) and not re.match(r'^\d\.\d+\.\d+', lines[i]):
                if re.match(r'^SB\s+\d+\.\d+', lines[i]):
                    sb_ref = lines[i].strip()
                elif lines[i].strip():
                    translation += lines[i].strip() + " "
                i += 1

            verse_roman_raw = "\n".join(roman).strip()
            synonyms_raw = "\n".join(synonyms).strip()

            block.update({
                "sutra_translation": convert_to_iast(verse_roman_raw),
                "sb_verse_no": sb_ref,
                "sb_verse_roman": convert_to_iast(verse_roman_raw),
                "sb_verse_devanagiri": convert_to_devanagari(verse_roman_raw),
                "sb_verse_synonyms": convert_to_iast(synonyms_raw),
                "sb_verse_translation": convert_to_iast(translation.strip())
            })

            blocks.append(block)

        else:
            i += 1

    return blocks

def write_to_csv(data, out_path):
    headers = [
        "Chapter Title", "Sub-Chapter Title", "sutra_no", "sutra_translation",
        "sb_verse_no", "sb_verse_roman", "sb_verse_devanagiri",
        "sb_verse_synonyms", "sb_verse_translation"
    ]
    with open(out_path, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=headers)
        writer.writeheader()
        writer.writerows(data)

def main():
    images = convert_pdf_to_images(PDF_PATH)
    all_blocks = []

    for i, img in enumerate(images):
        print(f"Processing Page {i+1} / {len(images)}")
        try:
            raw_text = pytesseract.image_to_string(img, lang="eng+san")
            print("OCR done.")
        except Exception as e:
            print(f"OCR failed on page {i+1}: {e}")
            continue

        try:
            cleaned = clean_ocr_text(remove_ascii_borders(raw_text))
            print("Cleaned text length:", len(cleaned))
        except Exception as e:
            print(f"Text cleaning failed on page {i+1}: {e}")
            continue

        try:
            print("Extracting blocks...")
            blocks = extract_blocks(cleaned)
            print(f"Found {len(blocks)} blocks.")
            all_blocks.extend(blocks)
        except Exception as e:
            print(f"Extraction failed on page {i+1}: {e}")
            continue

    print("Writing results to CSV...")
    write_to_csv(all_blocks, OUTPUT_CSV)
    print(f"CSV saved to: {OUTPUT_CSV}")

if __name__ == "__main__":
    main()
